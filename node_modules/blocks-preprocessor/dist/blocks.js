"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const process_1 = require("process");
const markdown_it_1 = __importDefault(require("markdown-it"));
const configureMarkdownIt_1 = __importDefault(require("./mdbook-blocks/rules/configureMarkdownIt"));
const md = new markdown_it_1.default();
md.use(configureMarkdownIt_1.default);
const processChapters = (chapter) => {
    chapter.content = md.render(chapter.content);
    if (Array.isArray(chapter.sub_items)) {
        chapter.sub_items.forEach((sub_item) => {
            if (sub_item.Chapter) {
                processChapters(sub_item.Chapter);
            }
        });
    }
};
const processBook = (book) => {
    if (Array.isArray(book.sections)) {
        book.sections.forEach((section) => {
            if (section.Chapter) {
                processChapters(section.Chapter);
            }
        });
    }
};
const args = process.argv.slice(2);
switch (args[0]) {
    case "supports":
        process.exit(0);
    case "test":
        const testData = (0, fs_1.readFileSync)(args[1], "utf8");
        const [context, book] = JSON.parse(testData);
        processBook(book);
        const output = JSON.stringify([context, book], null, 2);
        console.log(output);
        break;
    default:
        let inputData = "";
        process_1.stdin.on("data", (chunk) => (inputData += chunk));
        process_1.stdin.on("end", () => {
            try {
                const [_context, book] = JSON.parse(inputData);
                processBook(book);
                const output = JSON.stringify(book);
                console.log(output);
            }
            catch (error) {
                console.error(`Error processing input: ${error}`);
                process.exit(1);
            }
        });
        break;
}
//# sourceMappingURL=blocks.js.map